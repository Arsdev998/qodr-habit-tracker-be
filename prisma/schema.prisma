generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(50) 
  fullname    String       @db.VarChar(50)  @default("")
  email       String       @db.VarChar(50)  @default("")
  password    String
  major       String       @db.VarChar(50) @default("")
  motivation  String       @db.VarChar(50) @default("")
  numberPhone  String      @default("+62")
  techStack    String      @default("")
  joinDate    String
  role        Role         @default(SANTRI)
  habit       Habit[]
  habits      HabitStatus[] 
  warnings    Warning[]
  murajaah    Murajaah[]
  ziyadah     Ziyadah[]
  tilawah     Tilawah[]
  jurnal      Jurnal[]
  notifications Notification[] @relation("ReceivedNotifications")
  notificationsSent Notification[] @relation("SentNotifications")
  evaluationGeneralSend  EvaluationGeneral[]
  evaluationsRead        EvaluationRead[]
  createdAt   DateTime      @default(now())
  updateAt   DateTime       @updatedAt
}

enum Role {
  KESANTRIAN
  PENGURUS
  SANTRI
}


model Month {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(50)  
  year        Int           
  habitStatuses HabitStatus[] 
  days        Day[]
  murajaah    Murajaah[]
  ziyadah     Ziyadah[]
  tilawah     Tilawah[]
  jurnal      Jurnal[]
  createdAt   DateTime      @default(now())
  updateAt   DateTime       @updatedAt
}

model Day{
  id         Int  @id @default(autoincrement())
  date       Int
  monthId    Int
  month      Month  @relation(fields: [monthId],references: [id],onDelete: Cascade)
  habitStatuses HabitStatus[]
  createdAt   DateTime      @default(now())
  updateAt   DateTime       @updatedAt
}

model Habit {
  id          Int          @id @default(autoincrement())
  title       String       @db.VarChar(50) 
  habitStatuses HabitStatus[] 
  maxDays     Int?  
  userId      Int?
  user     User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())
  updateAt   DateTime       @updatedAt
}

model HabitStatus {
  id          Int      @id @default(autoincrement())
  userId      Int      
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  habitId     Int      
  habit       Habit    @relation(fields: [habitId], references: [id],onDelete: Cascade)
  monthId     Int      
  month       Month    @relation(fields: [monthId], references: [id],onDelete: Cascade)
  dayId       Int      
  day         Day      @relation(fields: [dayId], references: [id],onDelete: Cascade)
  status      Boolean  
  comments    String?  
  createdAt   DateTime      @default(now())
  updateAt   DateTime       @updatedAt
}



model Murajaah {
  id          Int          @id @default(autoincrement())
  surah       String       @db.VarChar(55)      // Nama surah yang dihafal atau dibaca
  date        DateTime     
  userId      Int
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  monthId     Int
  month       Month         @relation(fields: [monthId], references: [id])
  createdAt   DateTime      @default(now())
  updateAt   DateTime       @updatedAt
}

model Ziyadah {
  id          Int          @id @default(autoincrement())
  surah       String       @db.VarChar(50) 
  date        DateTime
  userId      Int
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  monthId     Int
  month       Month         @relation(fields: [monthId], references: [id])
  createdAt   DateTime      @default(now())
  updateAt   DateTime       @updatedAt
}

model Tilawah {
  id          Int          @id @default(autoincrement())
  surah       String       @db.VarChar(50) 
  lembar      Int           
  userId      Int
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  monthId     Int
  month       Month         @relation(fields: [monthId], references: [id])
  createdAt   DateTime      @default(now())
  updateAt   DateTime       @updatedAt
}

model Jurnal {
  id         Int          @id  @default(autoincrement())
  day        String       @db.VarChar(10)
  date       DateTime     
  userId     Int
  user       User         @relation(fields: [userId], references: [id])
  monthId    Int
  month      Month        @relation(fields: [monthId], references: [id])
  activity   String       @db.VarChar(500)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Warning {
  id          Int          @id @default(autoincrement())
  message     String       
  type        String        // Jenis peringatan: 'green', 'yellow', 'red'
  userId      Int
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())
}

model Notification {
  id          Int          @id @default(autoincrement())
  userId      Int
  user        User          @relation("ReceivedNotifications",fields: [userId], references: [id], onDelete: Cascade)
  userSendId  Int
  userSend    User          @relation("SentNotifications",fields: [userSendId], references: [id],onDelete: Cascade)
  message     String        @db.Text
  rawMessage  String?       @db.Text   
  status      Boolean       
  createdAt   DateTime     @default(now())
}

model Evaluation {
  id          Int         @id @default(autoincrement())
  about       String      @db.VarChar(50)
  problem     String      @db.VarChar(500)
  identifier  String?      
  createdAt   DateTime    @default(now())
}

model EvaluationGeneral {
  id          Int         @id @default(autoincrement())
  about       String      @db.VarChar(50)    
  problem     String      @db.VarChar(500)
  userId      Int         // User yang membuat evaluasi
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  readByUsers EvaluationRead[]
  identifier  String?
  createdAt   DateTime    @default(now())
}

model EvaluationRead {
  id                 Int               @id @default(autoincrement())
  evaluationId       Int
  evaluation        EvaluationGeneral  @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
  userId            Int
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  readAt            DateTime           @default(now())

  @@unique([evaluationId, userId]) // Memastikan satu user hanya bisa membaca satu kali untuk satu evaluasi
}