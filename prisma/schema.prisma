generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  name        String
  fullname    String       @default("")
  email       String       @default("")
  password    String
  motivation  String       @default("")
  joinDate    String
  role        Role         @default(SANTRI)// 'admin' atau 'santri'
  habit       Habit[]
  habits      HabitStatus[] // Relasi ke HabitStatus untuk mencatat status kebiasaan per user per bulan
  warnings    Warning[]
  murajaah    Murajaah[]
  ziyadah     Ziyadah[]
  tilawah     Tilawah[]
  notifications Notification[]
  createdAt   DateTime      @default(now())
  updateAt   DateTime       @updatedAt
}

enum Role {
  SUPERADMIN
  ADMIN
  SANTRI
}


model Month {
  id          Int          @id @default(autoincrement())
  name        String        // Nama bulan (misal: Januari)
  year        Int           
  habitStatuses HabitStatus[] // Hubungkan ke HabitStatus
  days        Day[]
  murajaah    Murajaah[]
  ziyadah     Ziyadah[]
  tilawah     Tilawah[]
  createdAt   DateTime      @default(now())
  updateAt   DateTime       @updatedAt
}

model Day{
  id         Int  @id @default(autoincrement())
  date       Int
  monthId    Int
  month      Month  @relation(fields: [monthId],references: [id],onDelete: Cascade)
  habitStatuses HabitStatus[]
  createdAt   DateTime      @default(now())
  updateAt   DateTime       @updatedAt
}

model Habit {
  id          Int          @id @default(autoincrement())
  title       String        // Nama dari habit yang akan dilakukan oleh user
  habitStatuses HabitStatus[] // Relasi ke HabitStatus untuk melacak status kebiasaan
  userId      Int?
  user     User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())
  updateAt   DateTime       @updatedAt
}

model HabitStatus {
  id          Int      @id @default(autoincrement())
  userId      Int      // Mengacu pada user yang mengisi status habit
  user        User     @relation(fields: [userId], references: [id])
  habitId     Int      // Mengacu pada habit yang dilakukan
  habit       Habit    @relation(fields: [habitId], references: [id],onDelete: Cascade)
  monthId     Int      // Mengacu pada bulan
  month       Month    @relation(fields: [monthId], references: [id],onDelete: Cascade)
  dayId       Int      // Mengacu pada hari di bulan tertentu
  day         Day      @relation(fields: [dayId], references: [id],onDelete: Cascade)
  status      Boolean  // Status True jika habit dilakukan, False jika tidak
  comments    String?  // Alasan tidak dilakukan (optional)
  createdAt   DateTime      @default(now())
  updateAt   DateTime       @updatedAt
}



model Murajaah {
  id          Int          @id @default(autoincrement())
  surah       String        // Nama surah yang dihafal atau dibaca
  lembar      Int           // Jumlah lembar yang dihafal
  userId      Int
  user        User          @relation(fields: [userId], references: [id])
  monthId     Int
  month       Month         @relation(fields: [monthId], references: [id])
  createdAt   DateTime      @default(now())
  updateAt   DateTime       @updatedAt
}

model Ziyadah {
  id          Int          @id @default(autoincrement())
  surah       String        // Nama surah yang ditambah hafalannya
  lembar      Int           // Jumlah lembar tambahan
  userId      Int
  user        User          @relation(fields: [userId], references: [id])
  monthId     Int
  month       Month         @relation(fields: [monthId], references: [id])
  createdAt   DateTime      @default(now())
  updateAt   DateTime       @updatedAt
}

model Tilawah {
  id          Int          @id @default(autoincrement())
  surah       String        // Nama surah yang dibaca
  lembar      Int           // Jumlah lembar yang dibaca
  userId      Int
  user        User          @relation(fields: [userId], references: [id])
  monthId     Int
  month       Month         @relation(fields: [monthId], references: [id])
  createdAt   DateTime      @default(now())
  updateAt   DateTime       @updatedAt
}

model Warning {
  id          Int          @id @default(autoincrement())
  message     String        // Pesan peringatan
  type        String        // Jenis peringatan: 'green', 'yellow', 'red'
  userId      Int
  user        User          @relation(fields: [userId], references: [id])
  createdAt   DateTime      @default(now())
}

model Notification {
  id          Int          @id @default(autoincrement())
  userId      Int
  user        User          @relation(fields: [userId], references: [id])
  message     String        // Pesan notifikasi
  status      Boolean       // true = dibaca, false = belum dibaca
  createdAt   DateTime     @default(now())
}

model Evaluation {
  id          Int         @id @default(autoincrement())
  about       String
  problem     String
  createdAt   DateTime    @default(now())
}
